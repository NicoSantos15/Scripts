/*
 * ----------------------------------------------------------------------------
 * Script: Impacted Work Packages Report
 * Tool: jArchi
 *
 * Description:
 * For each Work Package shown in the selected diagram view, this script:
 * - Validates and displays its start and end dates.
 * - Identifies capabilities it realizes.
 * - Finds other Work Packages (in the entire model) that:
 *     - Realize the same capability
 *     - Are marked as "Active"
 *     - Have overlapping date ranges
 * - Reports only those work packages that truly affect the selected view WP.
 *
 * Usage:
 * - Select an ArchiMate diagram view in the model tree.
 * - Run this script in jArchi.
 * - Review the console output for impacted Work Packages.
 *
 * Ownership: Property of BHP
 * Version: 1.1
 * ----------------------------------------------------------------------------
 */

console.show();
console.clear();

console.log("=== IMPACTED WORK PACKAGES ===\n");

// Get the selected diagram view
var diagram = $(selection).filter("archimate-diagram-model").first();
if (!diagram) {
  console.log("> No view identified: exiting.");
  exit();
} else {
  console.log("Selected View:", diagram.name + "\n");
}

function parseDate(dateStr) {
  if (!dateStr || typeof dateStr !== "string") return null;

  // Convert dd/mm/yyyy → yyyy-mm-dd
  if (/^\d{2}\/\d{2}\/\d{4}$/.test(dateStr)) {
    var parts = dateStr.split("/");
    dateStr = `${parts[2]}-${parts[1]}-${parts[0]}`;
  }

  return new Date(dateStr);
}


function isValidDate(dateStr) {
  if (!dateStr || typeof dateStr !== "string") return false;

  // If format is dd/mm/yyyy, convert it just for checking
  if (/^\d{2}\/\d{2}\/\d{4}$/.test(dateStr)) {
    var parts = dateStr.split("/");
    dateStr = `${parts[2]}-${parts[1]}-${parts[0]}`;
  }

  // Now parse yyyy-mm-dd
  return /^\d{4}-\d{2}-\d{2}$/.test(dateStr) && !isNaN(Date.parse(dateStr));
}

// Fetch all work packages in the model
var allModelWPs = $("work-package");

// Iterate over each work package *in the selected view*
$(diagram)
  .find("element")
  .each(function (viewElement) {
    if (viewElement.type != "work-package") return;

    var wpName = viewElement.name;
    var startDate = parseDate(viewElement.prop("Work Package Start Date"));
    var endDate = parseDate(viewElement.prop("Work Package End Date"));

    console.log("");
    console.log("Work Package:", wpName);

    // Validate and print start date
    if (!startDate || !isValidDate(startDate)) {
      console.log(
        "  Start Date: N/A (Invalid date format or missing date on work package)"
      );
    } else {
      console.log("  Start Date:", startDate);
    }

    // Validate and print end date
    if (!endDate || !isValidDate(endDate)) {
      console.log(
        "  End Date: N/A (Invalid date format or missing date on work package)"
      );
    } else {
      console.log("  End Date:", endDate);
    }

    // Find all capabilities realized by this WP
    var realizedCaps = $(viewElement)
      .outRels("realization-relationship")
      .filter(function (rel) {
        return rel.target.type == "capability";
      });

    var counter = 1;

    // For each capability realized by the view WP
    realizedCaps.each(function (rel) {
      var cap = rel.target;
      console.log("  " + counter + ".", cap.name);
      console.log("    Active Impacting Work-Packages:");

      // Iterate through all model work packages
      allModelWPs.each(function (modelWP) {
        // Skip if same WP or not active
        if (
          modelWP.concept.id !== viewElement.concept.id &&
          modelWP.prop("Work Package State") == "Active"
        ) {
          // Check if the model WP realizes the same capability
          var alsoRealizes = $(modelWP)
            .outRels("realization-relationship")
            .some(function (r) {
              return (
                r.target.type == "capability" &&
                r.target.name == cap.name &&
                cap.type == "capability"
              );
            });

          if (alsoRealizes) {
            // Retrieve and validate model WP's start/end dates
            var modelStart = parseDate(modelWP.prop("Work Package Start Date"));
            var modelEnd = parseDate(modelWP.prop("Work Package End Date"));

            if (
              isValidDate(startDate) &&
              isValidDate(endDate) &&
              isValidDate(modelStart) &&
              isValidDate(modelEnd)
            ) {
              var s1 = new Date(startDate);
              var e1 = new Date(endDate);
              var s2 = new Date(modelStart);
              var e2 = new Date(modelEnd);

              // Check if date ranges overlap
              if (s1 <= e2 && s2 <= e1) {
                console.log("      ", modelWP.name);
              }
            } else if (!startDate || !endDate || !modelStart || !modelEnd) {
              // If any date is invalid, skip the overlap check
              console.log("      ", modelWP.name, "(Date validation skipped due to missing or invalid date format (YYYY-MM-DD or DD/MM/YYYY))");
            }
          }
        }
      });

      counter++;
    });
  });

console.log("\nEnd of Impacted Work Packages Report");

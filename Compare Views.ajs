/*
 * ----------------------------------------------------------------------------
 * Script: Compare Elements and Relationships Between Two ArchiMate Views
 * Tool: jArchi
 * 
 * Compares two selected ArchiMate diagram views and prints:
 *  - Elements in one view but missing in the other
 *  - Relationships (drawn) in one view but missing in the other
 * 
 * How to use:
 *  - Select exactly two views in the model tree
 *  - Run the script to see results in the console
 * 
 * Output is formatted with Unicode icons for readability:
 *  📄 Views   🔍 Elements   🔗 Relationships
 * 
 * Ownership: Property of BHP
 * ----------------------------------------------------------------------------
 */

console.show();
console.clear();
const viewpointType = window.promptSelection(
    "Select viewpoint type:",
    ["Business", "Application", "Deployment"]
);

console.log(viewpointType);

if (!viewpointType) {
    window.alert("No viewpoint selected. Script cancelled.");
}

let csvRows = [];

// Checking which fields to write on csv, adjust to HLD template
if (viewpointType === "Business") {
    csvRows.push(['NAME', 'TYPE', 'MISSING FROM VIEW', 'CHANGE TYPE', 'REL SOURCE', 'REL TARGET']);
} else if (viewpointType === "Application") {
    csvRows.push(['NAME', 'TYPE', 'MISSING FROM VIEW', 'CHANGE TYPE', 'REL SOURCE', 'REL TARGET']);
} else if (viewpointType === "Deployment") {
    csvRows.push(['NAME', 'TYPE', 'MISSING FROM VIEW', 'CHANGE TYPE', 'REL SOURCE', 'REL TARGET']);
}

console.log("=== COMPARE VIEWS SCRIPT ===\n");

function checkViews(v1, v2) {
    var v2elements = [];
    $(v2).find('element').each(function(e) {
        v2elements.push(e.concept.id);
    });

    var lastconceptid = -1;
    console.log('🔍 Elements in "' + v1.name + '" but missing in "' + v2.name + '":');
    console.log('------------------------------------------------------------');
    console.log('ELEMENT NAME'.padEnd(43) + 'ELEMENT TYPE');
    console.log('------------------------------------------------------------');

    $(v1).find('element').each(function(e) {
        if (e.concept.id !== lastconceptid) {
            if (v2elements.indexOf(e.concept.id) === -1 && e.prop("Object State") !== 'Legend') {
                console.log('• ' + e.name.padEnd(40) + ' (' + e.type + ')');
                csvRows.push([e.name, e.type, v2.name, 'Element Object']); // Add to CSV rows
            }
            lastconceptid = e.concept.id;
        }
    });

    console.log('\n');
}

function checkViewRelationships(v1, v2) {
    var v2rels = [];

    $(v2).find('relationship').each(function(c) {
        if (c.prop("Object State") !== 'Legend') {
            v2rels.push(c.concept.id);
        }
    });

    var lastSig = '';
    console.log('🔗 Relationships in "' + v1.name + '" but missing in "' + v2.name + '":');
    console.log('------------------------------------------------------------------------------------------------------------------------');
    console.log('RELATIONSHIP NAME'.padEnd(33) + 'RELATIONSHIP TYPE'.padEnd(33) + 'RELATIONSHIP SOURCE'.padEnd(33) + 'RELATIONSHIP TARGET');
    console.log('------------------------------------------------------------------------------------------------------------------------');

    // Export to CSV
    $(v1).find('relationship').each(function(r) {
        if (r && r.source && r.target && r.prop("Object State") !== 'Legend') {
            var sig = r.concept.id;

            // check the source, target, relationship name and type
            if (sig !== lastSig && v2rels.indexOf(sig) === -1) {
                // var src = (r.source.name || '[Unnamed]').padEnd(30);
                // var tgt = (r.target.name || '[Unnamed]').padEnd(30);
                // console.log('• ' + r.type);
                console.log('• ' + r.name.padEnd(30) + ' (' + r.type + ')'.padEnd(30) + ' ' + r.source.name.padEnd(30) + ' ' + r.target.name);
                csvRows.push([
                    r.name, 
                    r.type, 
                    v2.name, 
                    'Relationship Object',
                    r.source.name || '[Unnamed]',
                    r.target.name || '[Unnamed]'
                ]); // Add to CSV rows

            }
            lastSig = sig;
        }
    });

    console.log('\n');
}

function exportCSVFile(csvRows) {
    const exportFile = window.promptSaveFile({
        title: 'Export Differences to CSV File',
        filterExtensions: ['*.csv'],
        fileName: 'compare_views.csv',
    });

    if (exportFile != null) {
        // Convert rows to CSV string manually
        const csvContent = csvRows.map(row => row.map(cell => {
            const escaped = String(cell).replace(/"/g, '""'); //escape quotes
            return `"${escaped}"`; // wrap in quotes
        }).join(',')).join('\n');

        $.fs.writeFile(exportFile, "\ufeff" + csvContent);
        console.log("Exported differences to CSV file: " + exportFile);
    } else {
        console.log("Export cancelled.");
    }
}

if (
    selection.size() === 2 &&
    $(selection.get(0)).is('archimate-diagram-model') &&
    $(selection.get(1)).is('archimate-diagram-model')
) {
    var v1 = selection.get(0);
    var v2 = selection.get(1);

    console.log('📄 COMPARE VIEWS: "' + v1.name + '" AND "' + v2.name + '"\n');

    checkViews(v1, v2);
    checkViews(v2, v1);

    console.log('📄 COMPARE RELATIONSHIPS: "' + v1.name + '" AND "' + v2.name + '"\n');

    checkViewRelationships(v1, v2);
    checkViewRelationships(v2, v1);

    if (window.confirm('Export differences to CSV file?')) {
        exportCSVFile(csvRows);
    } else {
        console.log("Export cancelled.");
    }
} else {
    window.alert('Select 2 views to compare');
}

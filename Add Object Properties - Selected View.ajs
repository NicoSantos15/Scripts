var debug = true;

console.show();
console.clear();

console.log("> Add element Properties - Selected View");

// Prompt for Author and Date
var propAuthor = window.prompt("Value for element Author (leave empty to cancel)?", "");
var propDate = window.prompt("Value for element Date (leave empty to set to current date) (Format: YYYY-MM-DD)?", "");

// Set default date if none provided
if (!propDate) {
	var date = new Date();
	propDate = date.getFullYear() + "-" + String(date.getMonth() + 1).padStart(2, "0") + "-" + String(date.getDate()).padStart(2, "0");
}

// === Helper Functions ===
function setPropIfMissing(element, propName, value) {
	if (!element.prop(propName)) {
		element.prop(propName, value, false);
		if (debug) console.log(element.name, ` - No ${propName}, adding ${propName}`);
	}
}

function promptAndSetProp(element, propName, message, options = null) {
	if (!element.prop(propName)) {
		let value = options ? window.promptSelection(message, options) : window.prompt(message, "");
		element.prop(propName, value, false);
		if (debug) console.log(element.name, ` - ${propName} added`);
	}
}

function addToFolder(folderName, element) {
	const folder = $(`folder.${folderName}`).first();
	folder.add(element);
}

function addCommonProps(element) {
	setPropIfMissing(element, "Object Author", propAuthor || "");
	setPropIfMissing(element, "Object Date", propDate);
	setPropIfMissing(element, "Object Status", "Draft");
}

function setObjectType(element, type) {
	setPropIfMissing(element, "Object Type", type);
}

// === Main Processing ===
if (selection.size() === 1 && $(selection.get(0)).is('archimate-diagram-model')) {
	let diagram = $("archimate-diagram-model").filter("." + selection.get(0).name).first();
	console.log("Diagram: ", diagram.name);

	let elements = $(diagram).find("element");
	console.log("Elements in View: ", elements.length);

	elements.forEach(function (element) {
		let modelElement = $("." + element.name).first();
		console.log("Model element:", modelElement.name, " View Element :", element.name);

		addCommonProps(modelElement);

		switch (modelElement.type) {
			case "business-role":
				addToFolder("Business Roles", modelElement);
				setObjectType(modelElement, "Business Role");
				promptAndSetProp(modelElement, "Position Identifier", "Position Identifier: ");
				break;

			case "system-software":
				addToFolder("System Software", modelElement);
				setObjectType(modelElement, "System Software");
				promptAndSetProp(modelElement, "System Software Vendor", "System Software Vendor: ");
				promptAndSetProp(modelElement, "System Software Product", "System Software Product: ");
				promptAndSetProp(modelElement, "System Software Version", "System Software Version: ");
				promptAndSetProp(modelElement, "System Software Lifecycle State", "System Software Lifecycle State: ", ["Unknown", "Current", "Supported", "End-of-Life"]);
				promptAndSetProp(modelElement, "System Software Licensed", "System Software Licensed: ", ["Unknown", "Yes", "No"]);
				promptAndSetProp(modelElement, "System Software License Type", "System Software License Type: ", ["Unknown", "COTS", "Bespoke (Internal)", "Bespoke (External)", "Open Source (GPLv2)", "Open Source (GPLv3)", "Open Source (MIT)", "Open Source (GNU)"]);
				break;

			case "technology-service":
				addToFolder("Technology Services", modelElement);
				setObjectType(modelElement, "Technology Service");
				break;

			case "equipment":
				addToFolder("Technology Equipment", modelElement);
				setObjectType(modelElement, "Equipment");
				break;

			case "gap":
				addToFolder("Gaps", modelElement);
				setObjectType(modelElement, "Gap");
				break;

			case "business-object":
				addToFolder("Business Information", modelElement);
				setPropIfMissing(modelElement, "Entity Class", "");
				setPropIfMissing(modelElement, "Entity Data Domain", "");
				break;

			case "goal":
				addToFolder("Goals", modelElement);
				break;

			case "driver":
				addToFolder("Drivers", modelElement);
				break;

			case "requirement":
				addToFolder("Requirements", modelElement);
				promptAndSetProp(modelElement, "Requirement Type", "Requirement Type: ", ["Functional", "Non-Functional", "Business", "Undefined"]);
				break;

			case "location":
				setPropIfMissing(modelElement, "Location Type", "Logical");
				setPropIfMissing(modelElement, "Location Address", "");
				setPropIfMissing(modelElement, "Location Identifier", "");
				break;

			case "work-package":
				addToFolder("Work Packages", modelElement);
				setObjectType(modelElement, "Work Package");
				promptAndSetProp(modelElement, "Work Package State", "Work Package State: ", ["Unknown", "Active", "Inactive", "Halted", "Completed", "Proposed"]);
				promptAndSetProp(modelElement, "Work Package Type", "Work Package Type: ", ["Unknown", "Non-Project", "Project", "Program of Work"]);
				promptAndSetProp(modelElement, "Work Package Project Type", "Work Package Project Type: ", ["Unknown", "Compliance: External", "Compliance: Internal", "Improvement: Cost", "Improvement: Culture", "Improvement: Production", "Risk Reduction: Material", "Risk Reduction: Non-Material", "Sustaining: Asset Integrity", "Sustaining: Cost", "Sustaining: Capacity"]);
				promptAndSetProp(modelElement, "Work Package Budget", "Work Package Budget: ");
				promptAndSetProp(modelElement, "Work Package Start Date", "Work Package Start Date (YYYY-MM-DD): ");
				promptAndSetProp(modelElement, "Work Package End Date", "Work Package End Date (YYYY-MM-DD): ");
				promptAndSetProp(modelElement, "Work Package Requestor", "Work Package Requestor: ");
				promptAndSetProp(modelElement, "Work Package Sponsor", "Work Package Sponsor: ");
				setPropIfMissing(modelElement, "Work Package Reference", "");
				promptAndSetProp(modelElement, "Work Package Investment Amount", "Work Package Investment Amount: ");
				promptAndSetProp(modelElement, "Work Package Function", "Work Package Function: ", ["Unknown", "Commercial", "Technology", "Exploration", "External Affairs", "Finance", "Human Resources", "HSE", "Innovation", "Maintenance & Engineering", "Projects", "Supply", "Value Engineering"]);
				promptAndSetProp(modelElement, "Work Package Asset", "Work Package Asset: ", ["Unknown", "Coal", "CopperSA", "Escondida", "Legacy Assets", "Mt Arthur Coal", "Pampa Norte", "Potash", "Technical", "WAIO"]);
				promptAndSetProp(modelElement, "Work Package Identifier", "Work Package Identifier (Planview ID): ");
				break;
		}
	});
} else {
	window.alert("No View Selected");
}

console.log("> Add Object Properties - Complete");

var debug = true;

console.show();
console.clear();

console.log("> Add element Properties - Selected View");

var propAuthor = window.prompt("Value for element Author (leave empty to cancel)?", "");
var propDate = window.prompt("Value for element Date (leave empty to set to current date) (Format: YYYY-MM-DD)?", "");

// original date fallback logic preserved
if (!propDate) {
	var date = new Date();
	var month = date.getMonth() + 1;
	if (month < 10) {
		month = "0" + month;
	}
	var day = date.getDate();
	if (day < 10) {
		day = "0" + day;
	}
	propDate = date.getFullYear() + "-" + month + "-" + day;
}

// === DRY Helpers ===
function setPropIfMissing(el, key, val) {
	if (!el.prop(key)) el.prop(key, val, false);
}

function promptProp(el, key, message, options = null) {
	if (!el.prop(key)) {
		var value = options ? window.promptSelection(message, options) : window.prompt(message, "");
		el.prop(key, value, false);
	}
}

function addToFolder(folderName, el) {
	var folder = $("folder." + folderName).first();
	folder.add(el);
}

if (selection.size() === 1 && ($(selection.get(0)).is('archimate-diagram-model'))) {

	// Select diagram and its elements
	var diagram = $("archimate-diagram-model").filter("." + selection.get(0).name).first();
	console.log("Diagram: ", diagram.name);

	var elements = $(diagram).find("element");

	console.log("Elements in View: ", elements.length);

	elements.forEach(function (element) {
		var modelelement = $("." + element.name).first();
		if (!modelelement) {
			console.warn("Skipping missing model element for:", element.name);
			return;
		}

		console.log("Model element:", modelelement.name, " View Element :", element.name);

		// Common properties
		setPropIfMissing(modelelement, "Object Author", propAuthor || "");
		setPropIfMissing(modelelement, "Object Date", propDate);
		setPropIfMissing(modelelement, "Object Status", "Draft");

		switch (modelelement.type) {
			case "business-role":
				addToFolder("Business Roles", modelelement);
				setPropIfMissing(modelelement, "Object Type", "Business Role");
				promptProp(modelelement, "Position Identifier", "Position Identifier: ");
				break;

			case "system-software":
				addToFolder("System Software", modelelement);
				setPropIfMissing(modelelement, "Object Type", "System Software");
				promptProp(modelelement, "System Software Vendor", "System Software Vendor: ");
				promptProp(modelelement, "System Software Product", "System Software Product: ");
				promptProp(modelelement, "System Software Version", "System Software Version: ");
				promptProp(modelelement, "System Software Lifecycle State", "System Software Lifecycle State: ", ["Unknown", "Current", "Supported", "End-of-Life"]);
				promptProp(modelelement, "System Software Licensed", "System Software Licensed: ", ["Unknown", "Yes", "No"]);
				promptProp(modelelement, "System Software License Type", "System Software License Type: ", ["Unknown", "COTS", "Bespoke (Internal)", "Bespoke (External)", "Open Source (GPLv2)", "Open Source (GPLv3)", "Open Source (MIT)", "Open Source (GNU)"]);
				break;

			case "technology-service":
				addToFolder("Technology Services", modelelement);
				setPropIfMissing(modelelement, "Object Type", "Technology Service");
				break;

			case "equipment":
				addToFolder("Technology Equipment", modelelement);
				setPropIfMissing(modelelement, "Object Type", "Equipment");
				break;

			case "gap":
				addToFolder("Gaps", modelelement);
				setPropIfMissing(modelelement, "Object Type", "Gap");
				break;

			case "business-object":
				addToFolder("Business Information", modelelement);
				setPropIfMissing(modelelement, "Entity Class", "");
				setPropIfMissing(modelelement, "Entity Data Domain", "");
				break;

			case "goal":
				addToFolder("Goals", modelelement);
				break;

			case "driver":
				addToFolder("Drivers", modelelement);
				break;

			case "requirement":
				addToFolder("Requirements", modelelement);
				promptProp(modelelement, "Requirement Type", "Requirement Type: ", ["Functional", "Non-Functional", "Business", "Undefined"]);
				break;

			case "location":
				setPropIfMissing(modelelement, "Location Type", "Logical");
				setPropIfMissing(modelelement, "Location Address", "");
				setPropIfMissing(modelelement, "Location Identifier", "");
				break;

			case "work-package":
				addToFolder("Work Packages", modelelement);
				setPropIfMissing(modelelement, "Object Type", "Work Package");
				promptProp(modelelement, "Work Package State", "Work Package State: ", ["Unknown", "Active", "Inactive", "Halted", "Completed", "Proposed"]);
				promptProp(modelelement, "Work Package Type", "Work Package Type: ", ["Unknown", "Non-Project", "Project", "Program of Work"]);
				promptProp(modelelement, "Work Package Project Type", "Work Package Project Type: ", ["Unknown", "Compliance: External", "Compliance: Internal", "Improvement: Cost", "Improvement: Culture", "Improvement: Production", "Risk Reduction: Material", "Risk Reduction: Non-Material", "Sustaining: Asset Integrity", "Sustaining: Cost", "Sustaining: Capacity"]);
				promptProp(modelelement, "Work Package Budget", "Work Package Budget: ");
				promptProp(modelelement, "Work Package Start Date", "Work Package Start Date (YYYY-MM-DD): ");
				promptProp(modelelement, "Work Package End Date", "Work Package End Date (YYYY-MM-DD): ");
				promptProp(modelelement, "Work Package Requestor", "Work Package Requestor: ");
				promptProp(modelelement, "Work Package Sponsor", "Work Package Sponsor: ");
				setPropIfMissing(modelelement, "Work Package Reference", "");
				promptProp(modelelement, "Work Package Investment Amount", "Work Package Investment Amount: ");
				promptProp(modelelement, "Work Package Function", "Work Package Function: ", ["Unknown", "Commercial", "Technology", "Exploration", "External Affairs", "Finance", "Human Resources", "HSE", "Innovation", "Maintenance & Engineering", "Projects", "Supply", "Value Engineering"]);
				promptProp(modelelement, "Work Package Asset", "Work Package Asset: ", ["Unknown", "Coal", "CopperSA", "Escondida", "Legacy Assets", "Mt Arthur Coal", "Pampa Norte", "Potash", "Technical", "WAIO"]);
				promptProp(modelelement, "Work Package Identifier", "Work Package Identifier (Planview ID): ");
				break;
		}
	});
} else {
	window.alert("No View Selected");
}

console.log("> Add Object Properties - Complete");
